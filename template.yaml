AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: My Multimedia Manager application

Globals:
  Function:
    Runtime: java21
    MemorySize: 256
    Timeout: 900

Resources:
  MyMultimediaManagerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: False
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTION'"
        AllowOrigin: "'https://master.d5i6lke35o8tb.amplifyapp.com'"

  MyMultimediaManagerLambdaRoleTemplate:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: MyMultimediaManagerLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: '*'
        - PolicyName: SecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  MyMultimediaManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt MyMultimediaManagerLambdaRoleTemplate.Arn
      Handler: wrzesniak.rafal.my.multimedia.manager.aws.StreamLambdaHandler::handleRequest
      CodeUri: .
      AutoPublishAlias: live
      SnapStart:
        ApplyOn: PublishedVersions
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref MyMultimediaManagerApi

  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    Properties:
      UserPoolName: "MyMultimediaManagerUserPool"
      DeletionProtection: 'ACTIVE'
      AutoVerifiedAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailMessageByLink: "Cześć,<br/><br/>Dzięki za rejestrację. Proszę potwierdź swój adres e-mail, klikając poniższy link:<br/>{##Zweryfikuj konto##}<br/><br/>Dziękujemy."
        EmailSubjectByLink: "[my-multimedia-manager] Potwierdź swój adres e-mail"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          RequireLowercase: true
      UsernameAttributes:
        - email

  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DeletionPolicy: Retain
    Properties:
      ClientName: "MyMultimediaManagerUserPoolClient"
      UserPoolId: !Ref MyCognitoUserPool

  MyCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DeletionPolicy: Retain
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      Domain: "my-multimedia-manager"

  UsersTableProd:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: 'mmm_prod_Users'
      AttributeDefinitions:
        - AttributeName: 'username'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'username'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

Outputs:
  MyMultimediaManager:
    Description: API Gateway MyMultimediaManager Endpoint
    Value:
      Fn::Sub: https://${MyMultimediaManagerApi}.execute-api.${AWS::Region}.amazonaws.com/prod/